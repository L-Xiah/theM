

####正则表达式####


####元字符####

\t	匹配一个制表符
\n	匹配一个换行符
\r	匹配一个回车符
.	匹配除换行符外的任意字符
\w	匹配字母、数字、下划线、汉字
\s	匹配任意的空白符
\d	匹配数字
\b	匹配一个单词边界，即字与空格间的位置。
^	匹配字符串的开始
$	匹配字符串的结束



\W		匹配任意非(字母、数字、下划线、汉字)的字符
\S		匹配任意非空白符的字符
\D		匹配任意非数字的字符
\B		匹配非单词边界
[^abc]	匹配非abc的字符

####重复限定符####

*		重复零次或更多次
+		重复一次或更多次
？		重复零次或一次
{n}		重复n次
{n,}	重复n次或更多次
{n,m}	重复n到m次

####转义、条件或####
转义\	匹配特殊字符
条件或|	匹配


####分组、区间####
（）	(ab)*
[]		[a-b]、[0-9]、[abc]


####贪婪和非贪婪####
贪婪匹配：当正则表达式中包含能接受重复的限定符时，通常的行为是（在使整个表达式能得到匹配的前提下）匹配尽可能多的字符，这匹配方式叫做贪婪匹配。特性：一次性读入整个字符串进行匹配，每当不匹配就舍弃最右边一个字符，继续匹配，依次匹配和舍弃（这种匹配-舍弃的方式也叫做回溯），直到匹配成功或者把整个字符串舍弃完为止，因此它是一种最大化的数据返回，能多不会少。
\d{3,6}		也就是假如字符串里有6个个数字可以匹配，那它就是全部匹配到。

懒惰(非贪婪)匹配：当正则表达式中包含能接受重复的限定符时，通常的行为是（在使整个表达式能得到匹配的前提下）匹配尽可能少的字符，这匹配方式叫做懒惰匹配。特性：从左到右，从字符串的最左边开始匹配，每次试图不读入字符匹配，匹配成功，则完成匹配，否则读入一个字符再匹配，依此循环（读入字符、匹配）直到匹配成功或者把字符串的字符匹配完为止。
*?、+？、？？、{n,m}?、{n,}?




####断言####

1. 正向先行断言（正前瞻）：
语法：（?=pattern）
作用：匹配pattern表达式的前面内容，不返回本身。


2. 正向后行断言（正后顾）:
语法：（?<=pattern）
作用：匹配pattern表达式的后面的内容，不返回本身。


3. 负向先行断言（负前瞻）:
语法：(?!pattern)
作用：匹配非pattern表达式的前面内容，不返回本身。


4. 负向后行断言（负后顾）:
语法：(?<!pattern)
作用：匹配非pattern表达式的后面内容，不返回本身。


####捕获和非捕获####

1.数字编号捕获组：
语法：(exp)解释：从表达式左侧开始，每出现一个左括号和它对应的右括号之间的内容为一个分组，在分组中，
第0组为整个表达式，第一组开始为分组。
比如
固定电话的：020-85653333
正则表达式为：(0\d{2})-(\d{8})
按照左括号的顺序，这个表达式有如下分组：
序号	编号		分组			内容
0		0		(0\d{2})-(\d{8})	020-85653333
1		1		(0\d{2})			020
2		2		(\d{8})				85653333

2. 命名编号捕获组：
语法：(?<name>exp)
解释：分组的命名由表达式中的name指定
比如区号也可以这样写:(?<quhao>\0\d{2})-(?<haoma>\d{8})
按照左括号的顺序，这个表达式有如下分组
序号	编号		分组			内容
0		0		(0\d{2})-(\d{8})	020-85653333
1		quhao	(0\d{2})			020
2		haoma	(\d{8})				85653333

3. 非捕获组：
语法：(?:exp)
解释：和捕获组刚好相反，它用来标识那些不需要捕获的分组，说的通俗一点，就是你可以根据需要去保存你的分组
比如区号也可以这样写:(?:\0\d{2})-(\d{8})
按照左括号的顺序，这个表达式有如下分组
序号	编号		分组			内容
0		0		(0\d{2})-(\d{8})	020-85653333
1		1		(\d{8})				85653333


####反向引用####
捕获会返回一个捕获组，这个分组是保存在内存中，不仅可以在正则表达式外部通过程序进行引用，也可以在正则表达式内部进行引用，这种引用方式就是反向引用。
根据捕获组的命名规则，反向引用可分为：
数字编号组反向引用：\k或\number
命名编号组反向引用：\k或者\'name'
上面说到捕获组是匹配子表达式的内容按序号或者命名保存起来以便使用
注意两个字眼：“内容” 和 “使用”

例如:
查找一串字母"aabbbbgbddesddfiid"里成对的字母
那这个表达式就有一个捕获组：（\w）
然后我们要用这个捕获组作为条件，那就可以：(\w)\1

