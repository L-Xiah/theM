
####lib/dll等反编译####
使用反编译工具；
使用二进制打开程序能修改一些简单的常量。


####工程构建####
每个函数都要写注释/文档（时间占比不少,任意开发人员都能看懂）
每个工程制定一个命名规则（可以总结各个工程中的共性部分）


####面向对象####
类的抽象特性要好。

面向三大特性：封装、继承、多态。
封装：只显示对外接口，将具体实现/属性封装在内部。
继承：可继承父类的接口、属性等，然后实现扩展。
多态：重载/重写方法；对象的向上/向下转型（父类实例转子类实例，或反之）。


####Cookie/Seesion####
Cookie->浏览器客户端存储用户信息等（Cookie具有不可跨域名性域名相关）
Seesion->服务器内存中存储用户信息

####序列化/####
序列化
将内存中的变量/对象保存到可存储或可传输的过程称之为序列化（serialization、marshalling、flattening）
序列化的标准格式-〉xml、json
将对象转为字节序列（字节流）的过程-〉序列化
将字节序列（字节流）恢复为对象的过程-〉反序列化

持久化
将程序数据在持久状态(保存到外存、硬盘中)和瞬时状态（取回到内存中）之间转换的机制。
（JDBC、文件IO都是一种持久化机制）
保存和取回的过程是通过序列化和对象IO来完成的。
数据的持久化是序列化的一个典型应用，对象只有在序列化之后才能进行持久化存储，从持久化存储介质中加载数据再通过反序列化传出运行时对象。


####编程范式####
https://blog.csdn.net/Henzox/article/details/70196599
命令式编程、结构化编程、函数式编程、面向过程、面向对象


####微服务####
RPC（Remote Procedure Call Protocol)（远程通信协议）-〉不同服务之前通信
SOA（Service-Oriented Architecture）（面向服务架构）-〉面向业务、松耦合
Docker-〉linux容器封装[应用程序+环境配置（依赖）-〉正常运行；Docker将程序和依赖带包进一个文件，作用相当于一个虚拟机]


微服务-〉将一个整体的应用拆分成若干个功能块进行独立发布（类似于孤网的分布式能源）；它的一大特性是分布式，各服务的管理；
微服务框架-〉Dubbo、SpringCloud、ZeroC、IceGrid



