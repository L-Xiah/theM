
####编程字体####
Fira Code字体（GitHub搜索下载，一般otf格式拖到系统字体库）
Inconsolata字体
Courier New字体
...

####lib/dll等反编译####
使用反编译工具；
使用二进制打开程序能修改一些简单的常量。


####工程构建####
每个函数都要写注释/文档（时间占比不少,任意开发人员都能看懂）
每个工程制定一个命名规则（可以总结各个工程中的共性部分）


####面向对象####
类的抽象特性要好。

面向三大特性：封装、继承、多态。
封装：只显示对外接口，将具体实现/属性封装在内部。
继承：可继承父类的接口、属性等，然后实现扩展。
多态：重载/重写方法；对象的向上/向下转型（父类实例转子类实例，或反之）。


####Cookie/Seesion####
Cookie->浏览器客户端存储用户信息等（Cookie具有不可跨域名性域名相关）
Seesion->服务器内存中存储用户信息

####回调函数####
callback：方法调用者给方法传入一个函数，在方法中执行；
回调的意义是 实现解耦的的前提下，调用另一个类的方法。Java中利用接口回调来解耦，解耦是目的，不是为了回调而回调；

####耦合/解耦####
耦合：两个方法/体系之间相互纠缠的比较紧密，当改变其中一方容易对另一方造成影响；
解耦：就是将这两种方法分离开来处理问题；

####序列化/持久化####
序列化
将内存中的变量/对象保存到可存储或可传输的过程称之为序列化（serialization、marshalling、flattening）
序列化的标准格式-〉xml、json
将对象转为字节序列（字节流）的过程-〉序列化
将字节序列（字节流）恢复为对象的过程-〉反序列化

持久化
将程序数据在持久状态(保存到外存、硬盘中)和瞬时状态（取回到内存中）之间转换的机制。
（JDBC、文件IO都是一种持久化机制）
保存和取回的过程是通过序列化和对象IO来完成的。
数据的持久化是序列化的一个典型应用，对象只有在序列化之后才能进行持久化存储，从持久化存储介质中加载数据再通过反序列化传出运行时对象。


####编程范式####
https://blog.csdn.net/Henzox/article/details/70196599
命令式编程、结构化编程、函数式编程、面向过程、面向对象


####微服务####
RPC（Remote Procedure Call Protocol)（远程通信协议）-〉不同服务之前通信
SOA（Service-Oriented Architecture）（面向服务架构）-〉面向业务、松耦合
ESB（Enterprise Service Bus）（企业服务总线）->连接各个服务点的管道

Docker-〉linux容器封装[应用程序+环境配置（依赖）-〉正常运行；Docker将程序和依赖带包进一个文件，作用相当于一个虚拟机]


微服务-〉将一个整体的应用拆分成若干个功能块进行独立发布（类似于孤网的分布式能源）；它的一大特性是分布式，各服务的管理；
微服务框架-〉Dubbo、SpringCloud、ZeroC、IceGrid



####分布式系统架构####

第一代：dubbo
第二代：Spring Cloud
第三代：Service Mesh
第四代：云(资源能力) + 容器(Runtime、调度) + Service Mesh(通信) + API Gateway(接口网关)


》前TCP时代：不同服务之间单独处理通信机制（网络传输处理机制）；
》TCP时代：TCP协议（网络传输），各服务不需要写自己单独的通信，成为操作系统网络层的一部分；
》第一代微服务：其实就是利用TCP网络通信，实现分布式系统而已（GFS、BigTable、MapReduce）；
》第二代微服务：在服务框架中整合了一套分布式系统通信功能，Spring Cloud等；
》第三代微服务：Service Mesh：将分布式系统通信功能做成单独一层，作为微服务的TCP协议；




####编程/？####
算法的时间复杂度与空间复杂度；
程序的运行数据与存储空间；
语言的开发效率与运行效率；

编程开发、测试和部署中总会出现许多bug；需要仔细查看报错信息，先定位错误情况；再去搜索解决方案；


####编译型语言/解释型语言####

编译型语言：编译器将源代码转换成机器码，即可执行程序(.exe程序)；比如C、C++、Golang等。
		编译一次，不依赖编译器，运行效率高；可移植性差，不够灵活。
解释型语言：不生成可执行程序，每次执行时，通过解释器一边执行一边转换；比如Python、PHP、Js等。
		跨平台性好，通过不同平台的解释器，将相同的源代码解释成不同机器码；效率很低。
Java、C#：介于两者之间的半编译半解释型语言，源代码转换为中间文件（字节码），将字节码在虚拟机中执行。
		优缺点介于两者之间






####变量/函数/类命名####
总体原则-〉驼峰法、规则统一、长短合适
对仗命名
add/remove		
begin/end
create/destory		
first/last				
get/put/set			
increment/decrement
insert/delete	
input/output
in/out
left/right
lock/unlock
min/max
next/previous
old/new
open/close		
show/hide
source/target
start/stop
up/down

####命名规则####
一、变量
1〉范围_类型_功能/抽象物
	范围-〉(temp函数内，the全局性，fun函数变量)
	类型-〉Int、String、Object、Arr	
	功能-〉动词	
	tempIntIni
	theStringState
	funObjectBox
2〉循环变量(或局部使用)：i、j、k、l、m、n
3〉Boolean变量：initIsTrue、openIsTrue、stateIsTrue


二、函数方法
1〉函数不限定在类中：
	返回类型 + "_" + 功能(动词+宾语)
	void_PrintDocument
2〉函数在类中：
	返回类型 + "_" + 功能(动词-〉类为函数作用的对象)
	void_Sum

三、类
1〉"C/..." + 抽象物（名词）
	CHomeController

